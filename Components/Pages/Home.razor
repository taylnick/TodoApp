@page "/"
@rendermode @(new InteractiveServerRenderMode(false))
@inject ILocalStorageService LocalStorage

<PageTitle>Home</PageTitle>

<h1>Welcome to TODO</h1>
<hr/>

@if (items != null && items.Any())
{
    <h4>Up next:</h4>
    <ul class="item-list">
        @foreach (var item in items)
        {
            <li>
                <input type="checkbox" @bind="item.IsCompleted" @onclick="StoreItems" />
                &nbsp;
                @if (item.IsCompleted)
                {
                    <s> @item.Description</s>
                }
                else
                {
                    @item.Description
                }
                <span style="margin-right: auto; cursor: pointer;" @onclick="() => RemoveItem(item)">
                    <i class="fa fa-trash" onmouseover=""></i>
                </span>

            </li>
        }
    </ul>
    <NewToDo OnNewItemAdded="CreateItem" />
}
else
{
    <p>Nothing pending! Let's fix that.</p>
    <NewToDo OnNewItemAdded="CreateItem" />
}

@code {
    // TODO: Create object to hold each todo item
    // TODO: Set up local storage to persist a list of items
    // TODO: Make sure local storage reads and writes
    // TODO: Edit pages to reflect the todo app (One main page? Hold all uncompleted tasks and optionally display completed ones)
    // TODO: Consider extra page for just viewing completed TODO's
    // TODO: Functionality to create a new item
    // TODO: Spice up UI to show checkbox
    // TODO: Enable checkbox and set that functionality
    // TODO: Edit UI to show completed tasks as strikethrough
    // TODO: Add functionality for editing completed tasks
    // TODO: Add functionality for deleting completed tasks

    private string key = "items";
    private List<Item>? items = new List<Item>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //TODO: Show little loading animation
            await LoadItems();
        }
    }

    private async Task LoadItems()
    {
        items = await LocalStorage.GetItemAsync<List<Item>>(key) ?? new List<Item>();
        StateHasChanged();
    }

    private async Task StoreItems()
    {
        await LocalStorage.SetItemAsync<List<Item>>(key, items!);
    }

    private async Task CreateItem(Item newItem)
    {
        if (items == null)
        {
            items = new List<Item>();
        }
        items!.Add(newItem);
        await StoreItems();
    }

    private async Task RemoveItem(Item item)
    {
        items!.Remove(item);
        await StoreItems();
        StateHasChanged();
    }
}
