@page "/"
@rendermode @(new InteractiveServerRenderMode(false))
@inject ILocalStorageService LocalStorage

<PageTitle>Home</PageTitle>

<h1>What ToDo, what ToDo indeed!</h1>
<hr/>

@if (items != null && items.Any())
{
    <h4>Up next:</h4>
    <ul class="item-list">
        @foreach (var item in items.Where((i) => !i.IsCompleted))
        {
            <li>
                <left>
                    <input type="checkbox" @bind="item.IsCompleted" @onclick="StoreItems" />
                    &nbsp;

                    @if (item == editingItem)
                    {
                        <input class="inline-editing" type="text" @bind="item.Description" @onblur="() => SaveEdit(item)" @onkeypress="(KeyboardEventArgs e) => CheckForEnter(e, item)"/>
                    }
                    else
                    {
                        <span>@item.Description</span>
                    }

                </left>
                <right>
                    <span @onclick="() => EditItem(item)">
                        <i class="fa fa-pencil"></i>
                    </span>

                    <span @onclick="() => RemoveItem(item)">
                        <i class="fa fa-trash"></i>
                    </span>
                </right>
            </li>
        }
    </ul>
    <NewToDo OnNewItemAdded="CreateItem" />
}
else
{
    <p>Nothing pending! Let's fix that.</p>
    <NewToDo OnNewItemAdded="CreateItem" />
}

@code {
    private string key = "items";
    private List<Item>? items = new List<Item>();
    private Item? editingItem;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //TODO: Show little loading animation
            await LoadItems();
        }
    }

    private async Task LoadItems()
    {
        items = await LocalStorage.GetItemAsync<List<Item>>(key) ?? new List<Item>();
        StateHasChanged();
    }

    private async Task StoreItems()
    {
        await LocalStorage.SetItemAsync<List<Item>>(key, items!);
    }

    private async Task CreateItem(Item newItem)
    {
        if (items == null)
        {
            items = new List<Item>();
        }
        items!.Add(newItem);
        await StoreItems();
    }

    private async Task RemoveItem(Item item)
    {
        items!.Remove(item);
        await StoreItems();
        StateHasChanged();
    }

    private void EditItem(Item item)
    {
        editingItem = item;
    }

    private async Task SaveEdit(Item item)
    {
        editingItem = null;
        await StoreItems();
    }

    private async void CheckForEnter(KeyboardEventArgs e, Item item)
    {
        if ((e.Key == "Enter" || e.Key == "NumpadEnter"))
        {
            await SaveEdit(item);
        }
    }
}
